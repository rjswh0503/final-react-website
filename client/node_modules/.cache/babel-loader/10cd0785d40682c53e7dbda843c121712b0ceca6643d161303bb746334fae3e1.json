{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\final-react-website\\\\client\\\\src\\\\Component\\\\Music\\\\MusicPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = () => {\n  _s();\n  const audioUrl = ['https://ex/song1.mp3', 'https://ex/song2.mp3'];\n  // 플레이 리스트\n  const [playlist, setPlaylist] = useState(['제목1', '제목2', '제목3']);\n  // 현재 재생중인 음악\n  const [currentSong, setCurrentSong] = useState(0);\n  // 음악 재생, 음악 일시정지를 위한 상태\n  const [isPlaying, setIsPlaying] = useState(false);\n  // 오디오 박스\n  const [audio, setAudio] = useState(new Audio(audioUrl[currentSong]));\n  useEffect(() => {\n    // Audio 박스 객체를 초기화 \n    setAudio(new Audio(audioUrl[currentSong]));\n\n    // 재생중을 누를 경우 재생이 될 수 있도록 설정\n    if (isPlaying) {\n      audio.play();\n    }\n\n    // Audio 시작할 때 시간과 일시정지 설정\n    return () => {\n      audio.pause();\n      audio.currentTime = 0;\n    };\n  }, [currentSong]);\n\n  // 재생 버튼을 누를 때 재생이 될 수 있도록 설정\n  const playSong = () => {\n    setIsPlaying(true);\n    audio.play();\n    console.log('곡 재생 : ', playlist[currentSong]);\n  };\n  // 일시정지 버튼\n  const pauseSong = () => {\n    setIsPlaying(false);\n    audio.pause();\n    console.log('일시정지');\n  };\n\n  //재생목록\n  const displayPlaylist = () => {\n    console.log('재생목록 : ', playlist.json(','));\n  };\n\n  // 다음곡 재생\n\n  const playNextSong = () => {\n    const nextSong = (currentSong + 1) % playlist.length;\n    setCurrentSong(nextSong);\n    setIsPlaying;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC74C\\uC545\\uD50C\\uB808\\uC774\\uC5B4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uD604\\uC7AC \\uC7AC\\uC0DD\\uC911: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: playSong,\n      disabled: isPlaying,\n      children: \"\\uC7AC\\uC0DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: pauseSong,\n      disabled: !isPlaying,\n      children: \"\\uC77C\\uC2DC\\uC815\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: displayPlaylist,\n      children: \"\\uC7AC\\uC0DD \\uBAA9\\uB85D \\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(MusicPlayer, \"Wxic5qE3iJZshBU3QDcLB6dGu2U=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MusicPlayer","_s","audioUrl","playlist","setPlaylist","currentSong","setCurrentSong","isPlaying","setIsPlaying","audio","setAudio","Audio","play","pause","currentTime","playSong","console","log","pauseSong","displayPlaylist","json","playNextSong","nextSong","length","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/user1/final-react-website/client/src/Component/Music/MusicPlayer.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nconst MusicPlayer = () => {\r\n    const audioUrl = ['https://ex/song1.mp3', 'https://ex/song2.mp3'];\r\n    // 플레이 리스트\r\n    const [playlist, setPlaylist] = useState(['제목1', '제목2', '제목3']);\r\n    // 현재 재생중인 음악\r\n    const [currentSong, setCurrentSong] = useState(0);\r\n    // 음악 재생, 음악 일시정지를 위한 상태\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    // 오디오 박스\r\n    const [audio, setAudio] = useState(new Audio(audioUrl[currentSong]));\r\n\r\n    useEffect(() => {\r\n        // Audio 박스 객체를 초기화 \r\n        setAudio(new Audio(audioUrl[currentSong]));\r\n\r\n        // 재생중을 누를 경우 재생이 될 수 있도록 설정\r\n        if(isPlaying) {\r\n            audio.play();\r\n        }\r\n\r\n        // Audio 시작할 때 시간과 일시정지 설정\r\n        return () => {\r\n            audio.pause();\r\n            audio.currentTime = 0;\r\n        };\r\n    }, [currentSong]);\r\n\r\n    // 재생 버튼을 누를 때 재생이 될 수 있도록 설정\r\n    const playSong = () => {\r\n        setIsPlaying(true);\r\n        audio.play();\r\n        console.log('곡 재생 : ', playlist[currentSong]);\r\n    };\r\n    // 일시정지 버튼\r\n    const pauseSong = () => {\r\n        setIsPlaying(false);\r\n        audio.pause();\r\n        console.log('일시정지');\r\n    };\r\n\r\n\r\n\r\n    //재생목록\r\n    const displayPlaylist = () => {\r\n        console.log('재생목록 : ', playlist.json(','));\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    // 다음곡 재생\r\n\r\n    const playNextSong = () => {\r\n        const nextSong = (currentSong + 1) %playlist.length;\r\n        setCurrentSong(nextSong);\r\n        setIsPlaying\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>음악플레이어</h1>\r\n            <p>현재 재생중: </p>\r\n            <button onClick={playSong} disabled={isPlaying}>\r\n                재생\r\n            </button>\r\n            <button onClick={pauseSong} disabled={!isPlaying}>\r\n                일시정지\r\n            </button>\r\n            <button onClick={displayPlaylist}>재생 목록 보기</button>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nexport default MusicPlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}